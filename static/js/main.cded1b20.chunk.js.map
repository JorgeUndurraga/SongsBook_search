{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","guardarBusquedaLetra","useState","artista","cancion","busqueda","guadarBusqueda","error","guardarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Cancion","letra","length","Info","info","Object","keys","strArtist","strStyle","strBiographyES","src","strArtistThumb","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","busquedaletra","guardarLetra","guardarInfo","useEffect","a","url","url2","Promise","all","axios","informacion","data","lyrics","artists","consultarApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cded1b20.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Formulario = ({guardarBusquedaLetra}) => {\n\n    //state\n    const [busqueda, guadarBusqueda] = useState({\n        artista: '',\n        cancion: ''\n\n    });\n\n    const [error , guardarError] = useState(false);\n\n    // extraer\n\n    const { artista , cancion } = busqueda;\n\n\n    // funcion a cada input para leer su contenido\n    const actualizarState = e => {\n        guadarBusqueda({\n            ...busqueda,\n            [e.target.name] : e.target.value\n\n        })\n    }\n\n    // consulta a la api\n    const buscarInformacion = e => {\n        e.preventDefault();\n\n        if(artista.trim() === '' || cancion.trim() === '' ){\n            guardarError(true);\n            return;\n\n        }\n        guardarError(false);\n\n        // pasar al componenenet principal\n        guardarBusquedaLetra(busqueda);\n\n\n\n    }\n\n\n\n\n    return ( \n        <div className=\"bg-dark\">\n            { error ? <p className=\"alert alert-danger text-center p-2\"> Todos los campos son obligatorios</p> : null} \n            <div className=\"container\">\n                <div className=\"row\">\n                    \n\n                    <form\n                      onSubmit={buscarInformacion}\n                      className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\n                    >\n                        <fieldset>\n                            <legend className=\"text-center\">Busca la letra de tu canción favorita</legend>\n\n                            <div className=\"row\">\n                                <div className=\"col-md-6 \">\n                                    <div className=\"form-group\">\n                                        <label>Artist</label>\n                                        <input \n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"artista\" \n                                            placeholder=\"Name artist\"\n                                            onChange={actualizarState}\n                                            value={artista}\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"col-md-6 \">\n                                    <div className=\"form-group\">\n                                        <label>Song</label>\n                                        <input \n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"cancion\" \n                                            placeholder=\"Name song\"\n                                            onChange={actualizarState}\n                                            value={cancion}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            <button \n                                type=\"submit\"\n                                className=\"btn btn-warning float-right text-dark\"\n                                >\n                                Search</button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div>\n        </div>\n     );\n}\n \nexport default Formulario\n;","import React, { Fragment } from 'react';\n\nconst Cancion = ({letra}) => {\n\n    if(letra.length === 0 ) return null;\n    return (\n        <Fragment>\n            <h2>Letra canción</h2>\n            <p className=\"letra\">{letra}</p> \n        </Fragment>\n    );\n     \n}\nexport default Cancion;","import React from 'react';\n\nconst Info = ({info}) => {\n    if(Object.keys(info).length === 0 ) return null;\n\n    const { strArtist, strStyle, strBiographyES } = info;\n\n\n    return ( \n        <div className=\"card border-light\">\n            <div className=\"card-header bg-warning text-dark font-weight-bold\">\n                Información Artista\n            </div>\n            <div className=\"card-body\">\n                <img src={info.strArtistThumb} alt=\"logo artista\" />\n                <p className=\"card-text\">Estilo Musical > {strStyle}</p>\n                <h2 className=\"card-text\">Biografía > </h2>\n                <p className=\"card-text\">{strBiographyES}</p>\n                <p className=\"card-text\">\n                    <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <i className=\"fab fa-facebook\"></i>\n                    </a>\n                    <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-twitter\"></i>\n                    </a>\n                    <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-lastfm\"></i>\n                    </a>\n                </p>\n            </div> \n        </div>\n\n     );\n}\n \nexport default Info;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cancion from './components/Cancion';\nimport Info from './components/Info';\nimport axios from 'axios';\n\nfunction App() {\n\n  // Definir el state\n\n  const [ busquedaletra, guardarBusquedaLetra ] = useState({});\n\n  const [ letra, guardarLetra] = useState ('');\n  const [ info, guardarInfo] = useState({});\n\n  useEffect(() => {\n    if(Object.keys(busquedaletra).length === 0 ) \n      return;\n\n      const consultarApiLetra = async () => {\n        const { artista , cancion } = busquedaletra;\n        const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`;\n        const url2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n        \n        const [letra, informacion] = await Promise.all([\n          axios(url),\n          axios(url2)\n        ]);\n        \n        guardarLetra(letra.data.lyrics);\n        guardarInfo(informacion.data.artists[0]);\n\n      }\n      consultarApiLetra();\n  }, [busquedaletra, info]);\n\n\n\n  return (\n\n    <Fragment>\n      <Formulario\n          guardarBusquedaLetra={guardarBusquedaLetra}\n      \n      />\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Info\n              info={info}\n            \n            />\n\n\n            \n          </div>\n          <div className=\"col-md-6\">\n            <Cancion\n              letra={letra}\n            />\n            \n            \n          </div>\n        </div>\n      </div>\n    </Fragment>\n  \n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}